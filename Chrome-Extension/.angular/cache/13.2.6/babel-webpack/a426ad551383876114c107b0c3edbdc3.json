{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/globals/global-vars.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../ui-components/heading-component/heading-component.component\";\nimport * as i4 from \"../timetable-day/timetable-day.component\";\nimport * as i5 from \"../../ui-components/toggle-switch/toggle-switch.component\";\nexport let SetupTimetableScreenComponent = /*#__PURE__*/(() => {\n  class SetupTimetableScreenComponent {\n    constructor(globalVars, router) {\n      this.globalVars = globalVars;\n      this.router = router;\n      this.calibrationData = [];\n    }\n\n    ngOnInit() {\n      if (this.globalVars.getVar(\"wk1Data\") == \"empty\" || this.globalVars.getVar(\"wk1Data\") == \"[]\") {\n        // If user has no currently stored timetable data\n        if (this.globalVars.getVar(\"timetableRaw\") == \"empty\") {\n          // If user has not uploaded file\n          this.router.navigate([\"settings\"]);\n        }\n\n        this.cleanData(); // Convert raw text file into timetable data\n      } else {\n        // Init calibration data\n        this.initCalibrationData();\n\n        if (this.globalVars.getVar(\"wk1IsWkA\") == \"true\") {\n          this.defaultCalibrationOption = \"label1\";\n        } else if (this.globalVars.getVar(\"wk1IsWkA\") == \"false\") {\n          this.defaultCalibrationOption = \"label2\";\n        } // Init current week letter and number\n\n\n        if (this.globalVars.getVar(\"weekLetter\") === \"a\") {\n          this.currentWeekOption = \"label1\";\n        } else if (this.globalVars.getVar(\"weekLetter\") === \"b\") {\n          this.currentWeekOption = \"label2\";\n        }\n\n        this.currentWeek = parseInt(this.globalVars.getVar(\"weekNumber\"));\n      }\n    }\n\n    cleanData() {\n      console.log(\"CLEANING\"); // Split the data into individual lines\n\n      var inputData = this.globalVars.getVar(\"timetableRaw\");\n      var dataList = inputData.split(\"\\n\"); // Get an array of strings were each element is a new line in the .ical file\n      // From ALL the available data, create a list of every period mentioned in the file \n\n      var periodsList = [];\n\n      for (var i = 0; i < dataList.length; i++) {\n        if (dataList[i] == 'BEGIN:VEVENT\\r') {\n          // If this line represents the start of a new line\n          let datePair = [];\n\n          for (var k = 0; k < 2; k++) {\n            let year = parseInt(dataList[i + k * 2 + 1].substring(24 - 2 * k, 28 - 2 * k));\n            let month = parseInt(dataList[i + k * 2 + 1].substring(28 - 2 * k, 30 - 2 * k)) - 1;\n            let day = parseInt(dataList[i + k * 2 + 1].substring(30 - 2 * k, 32 - 2 * k));\n            let hour = parseInt(dataList[i + k * 2 + 1].substring(33 - 2 * k, 35 - 2 * k));\n            let minute = parseInt(dataList[i + k * 2 + 1].substring(35 - 2 * k, 37 - 2 * k));\n            let date = new Date(Date.UTC(year, month, day, hour, minute, 0));\n            datePair.push(date);\n          }\n\n          let desc = dataList[i + 5].substring(12);\n          let teacher = desc.substring(9, desc.indexOf(\"\\\\n\"));\n          let period = desc.substring(desc.indexOf(\"\\\\n\") + 10);\n          let className = dataList[i + 6].substring(8);\n          let location = dataList[i + 7].substring(9);\n\n          if (dataList[i + 8] == \"END:VEVENT\\r\") {\n            // Double checks file strucrture before appending list\n            periodsList.push({\n              \"startDate\": datePair[0],\n              \"endDate\": datePair[1],\n              \"teacher\": teacher,\n              \"period\": period,\n              \"classname\": className,\n              \"location\": location\n            });\n          }\n        }\n      } // Sort the list of periods (Should be sorted by the .ical file but is always useful)\n\n\n      periodsList.sort((a, b) => {\n        return a.startDate.getTime() - b.startDate.getTime();\n      }); // Find 2 full, different weeks to allow the user to specify which is week A or week B\n\n      var wk1StartIndex = 0;\n      var wk2StartIndex = 0;\n      var wk2EndIndex = 0; // Find the start of week 1 (The first monday present in the file)\n\n      for (var i = 0; i < periodsList.length; i++) {\n        if (periodsList[i].startDate.getDay() == 1) {\n          //If the class is on a monday\n          wk1StartIndex = i;\n          break;\n        }\n      } // Find the start of week 2 (The first monday present that ISN'T the same as the start of week 1)\n\n\n      for (var i = 0; i < periodsList.length; i++) {\n        if (periodsList[i].startDate.getDay() == 1) {\n          //If the class is on a monday\n          if (periodsList[i].startDate.getDate() != periodsList[wk1StartIndex].startDate.getDate()) {\n            //Ensure the start of week B isn't the same date as the start of week A\n            wk2StartIndex = i;\n            break;\n          }\n        }\n      } // Find end of week 2 (The first friday AFTER the start of week 2)\n\n\n      for (var i = wk2StartIndex; i < periodsList.length; i++) {\n        if (periodsList[i].startDate.getDay() == 5) {\n          //If the class is on a Friday\n          if (periodsList[i + 1].startDate.getDay() == 1) {\n            // If the NEXT class is on Monday\n            wk2EndIndex = i;\n            break;\n          }\n        }\n      } // All the data for the possible weeks (At this stage it is still unknown whether wk 1 is A or B)\n\n\n      var wk1Data = periodsList.slice(wk1StartIndex, wk2StartIndex);\n      var wk2Data = periodsList.slice(wk2StartIndex, wk2EndIndex + 1); // Seperate periods into an array, were each elem is a list containing all the subjects on a given day\n\n      var sortedWk1Data = [];\n      var sortedWk2Data = [];\n      let thisDayList = [];\n      let lastDayIndex = new Date(wk1Data[0][\"startDate\"]).getDay();\n\n      for (var i = 0; i < wk1Data.length; i++) {\n        if (i == wk1Data.length - 1) {\n          // If it is the final period in the array \n          thisDayList.push(wk1Data[i]);\n          sortedWk1Data.push(thisDayList);\n          break;\n        }\n\n        if (wk1Data[i].startDate.getDay() == lastDayIndex) {\n          thisDayList.push(wk1Data[i]);\n        } else {\n          // IF this period is the first period of the next day\n          lastDayIndex = wk1Data[i].startDate.getDay();\n          sortedWk1Data.push(thisDayList);\n          thisDayList = [];\n          thisDayList.push(wk1Data[i]);\n        }\n      } // Do the same for week 2\n\n\n      thisDayList = [];\n      lastDayIndex = new Date(wk2Data[0].startDate).getDay();\n\n      for (var i = 0; i < wk2Data.length; i++) {\n        if (i == wk2Data.length - 1) {\n          thisDayList.push(wk2Data[i]);\n          sortedWk2Data.push(thisDayList);\n          break;\n        }\n\n        if (wk2Data[i].startDate.getDay() == lastDayIndex) {\n          thisDayList.push(wk2Data[i]);\n        } else {\n          lastDayIndex = wk2Data[i].startDate.getDay();\n          sortedWk2Data.push(thisDayList);\n          thisDayList = [];\n          thisDayList.push(wk2Data[i]);\n        }\n      }\n\n      this.globalVars.setVar(\"wk1Data\", JSON.stringify(sortedWk1Data));\n      this.globalVars.setVar(\"wk2Data\", JSON.stringify(sortedWk2Data));\n      this.globalVars.setVar(\"wk1IsWkA\", \"unknown\");\n      this.initCalibrationData();\n    }\n\n    initCalibrationData() {\n      let wk1Data = JSON.parse(this.globalVars.getVar(\"wk1Data\"));\n\n      for (var i = 0; i < wk1Data[0].length; i++) {\n        wk1Data[0][i][\"startDate\"] = new Date(wk1Data[0][i][\"startDate\"]);\n      }\n\n      this.calibrationData = wk1Data[0];\n    }\n\n    updateCalibration(selectedWeek) {\n      if (selectedWeek === \"Week A\") {\n        this.globalVars.setVar(\"wk1IsWkA\", \"true\");\n      } else if (selectedWeek === \"Week B\") {\n        this.globalVars.setVar(\"wk1IsWkA\", \"false\");\n      }\n    }\n\n    updateWeekLetter(selectedLetter) {\n      if (selectedLetter === \"Week A\") {\n        this.globalVars.setVar(\"weekLetter\", \"a\");\n      } else if (selectedLetter === \"Week B\") {\n        this.globalVars.setVar(\"weekLetter\", \"b\");\n      }\n    }\n\n    updateWeekNumber(event) {\n      event.preventDefault();\n      this.globalVars.setVar(\"weekNumber\", document.getElementById(\"weekNumberInput\").value.toString());\n    }\n\n  }\n\n  SetupTimetableScreenComponent.ɵfac = function SetupTimetableScreenComponent_Factory(t) {\n    return new (t || SetupTimetableScreenComponent)(i0.ɵɵdirectiveInject(i1.GlobalVarsService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n\n  SetupTimetableScreenComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SetupTimetableScreenComponent,\n    selectors: [[\"app-setup-timetable-screen\"]],\n    decls: 27,\n    vars: 5,\n    consts: [[1, \"heading-component-container\"], [\"line1Text\", \"Setup your timetable\", \"line2Text\", \"Follow the below steps to properly setup timetable data\"], [1, \"gap-container\"], [1, \"section-container\"], [1, \"section-item\"], [1, \"subheading-container\"], [1, \"subheading-text\"], [1, \"calibration-container\"], [1, \"calibration-day\", 3, \"timetableData\", \"doTimes\"], [1, \"toggle-container\"], [\"label1\", \"Week A\", \"label2\", \"Week B\", \"elemID\", \"calibrate\", \"id\", \"calibrationToggle\", 3, \"defaultVal\", \"state\"], [1, \"subeading-text\"], [\"label1\", \"Week A\", \"label2\", \"Week B\", \"elemID\", \"current\", \"id\", \"currentToggle\", 3, \"defaultVal\", \"state\"], [1, \"weekNumber-form\", 3, \"submit\"], [\"type\", \"number\", \"id\", \"weekNumberInput\", 1, \"weekNumber-input\", 3, \"value\"]],\n    template: function SetupTimetableScreenComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"app-heading-component\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5)(6, \"h2\", 6);\n        i0.ɵɵtext(7, \"Is the day below Monday of Week A or Week B?\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(8, \"div\", 7);\n        i0.ɵɵelement(9, \"app-timetable-day\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 9)(11, \"app-toggle-switch\", 10);\n        i0.ɵɵlistener(\"state\", function SetupTimetableScreenComponent_Template_app_toggle_switch_state_11_listener($event) {\n          return ctx.updateCalibration($event);\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(12, \"div\", 4)(13, \"div\", 5)(14, \"h2\", 11);\n        i0.ɵɵtext(15, \"What week is it this week?\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"h4\", 11);\n        i0.ɵɵtext(17, \"(If its the weekend, Sunday represents the start of the new week)\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(18, \"div\", 9)(19, \"app-toggle-switch\", 12);\n        i0.ɵɵlistener(\"state\", function SetupTimetableScreenComponent_Template_app_toggle_switch_state_19_listener($event) {\n          return ctx.updateWeekLetter($event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(20, \"div\", 5)(21, \"h2\", 11);\n        i0.ɵɵtext(22, \"What week number is it this Week?\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"h4\", 11);\n        i0.ɵɵtext(24, \"(If its the weekend, Sunday represents the start of the new week)\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(25, \"form\", 13);\n        i0.ɵɵlistener(\"submit\", function SetupTimetableScreenComponent_Template_form_submit_25_listener($event) {\n          return ctx.updateWeekNumber($event);\n        });\n        i0.ɵɵelement(26, \"input\", 14);\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"timetableData\", ctx.calibrationData)(\"doTimes\", false);\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"defaultVal\", ctx.defaultCalibrationOption);\n        i0.ɵɵadvance(8);\n        i0.ɵɵpropertyInterpolate(\"defaultVal\", ctx.currentWeekOption);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"value\", ctx.currentWeek);\n      }\n    },\n    directives: [i3.HeadingComponentComponent, i4.TimetableDayComponent, i5.ToggleSwitchComponent],\n    styles: [\".gap-container[_ngcontent-%COMP%]{height:50px;width:100%}.subheading-container[_ngcontent-%COMP%]{background-color:var(--bottom-bg-color);margin:auto auto 15px;width:100%;height:65px;border-radius:10px 0;text-align:center;font-size:1.25rem}.subheading-text[_ngcontent-%COMP%]{width:100%;margin:5px auto auto;text-align:center;font-size:1rem}.calibration-container[_ngcontent-%COMP%]{width:85%;height:auto;margin:5px auto auto}.toggle-container[_ngcontent-%COMP%]{width:85%;height:50px;margin:0 auto auto}.section-container[_ngcontent-%COMP%]{width:100%;display:flex;flex-direction:row;flex-wrap:wrap;justify-content:center;padding-bottom:50px}.section-item[_ngcontent-%COMP%]{width:45%;border-radius:15px 0;background-color:#0000001a;padding:15px}.weekNumber-form[_ngcontent-%COMP%]{width:80%;height:50px;margin:auto}.weekNumber-input[_ngcontent-%COMP%]{margin-top:0;height:100%;width:100%;background-color:var(--bottom-bg-color);border:none;transition:all .25s ease;font-size:1.5rem}.weekNumber-input[_ngcontent-%COMP%]:hover{background-color:var(--mid-bg-color);box-shadow:5px 5px 5px #050311;transform:translateY(-2.5px) translate(-2.5px)}\"]\n  });\n  return SetupTimetableScreenComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}