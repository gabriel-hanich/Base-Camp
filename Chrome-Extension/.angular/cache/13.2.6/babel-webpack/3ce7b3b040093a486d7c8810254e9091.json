{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as Forge from 'node-forge';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ConnectionsService = /*#__PURE__*/(() => {\n  class ConnectionsService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n    }\n\n    getPublicKey() {\n      return new Promise((resolve, reject) => {\n        this.httpClient.get(environment.apiURL + \"/encryption/pubKey\").subscribe(res => {\n          resolve(res);\n        });\n      });\n    }\n\n    createNewUser(name, email, password, publicKey) {\n      // Sends the backend initial data about the user and recieves the encrypted\n      // password token for local storage \n      // Encrypt the password using the public key\n      const rsa = Forge.pki.publicKeyFromPem(publicKey);\n      let pwd = window.btoa(rsa.encrypt(password.toString()));\n      return this.httpClient.post(environment.apiURL + \"/userData/create\", {\n        \"name\": name,\n        \"email\": email.toString(),\n        \"pwd\": pwd\n      });\n    }\n\n    getUserData(email, passwordToken) {\n      return this.httpClient.post(environment.apiURL + \"/userData/read\", {\n        \"email\": email.toString(),\n        \"pwdToken\": passwordToken\n      });\n    }\n\n    validateUserEmail(email) {\n      return this.httpClient.post(environment.apiURL + \"/userData/validateEmail\", {\n        \"email\": email\n      });\n    }\n\n    login(email, password, publicKey) {\n      // Encrypt the password using the public key\n      const rsa = Forge.pki.publicKeyFromPem(publicKey);\n      let pwd = window.btoa(rsa.encrypt(password.toString()));\n      return this.httpClient.post(environment.apiURL + \"/userData/logIn\", {\n        \"email\": email.toString(),\n        \"pwd\": pwd\n      });\n    }\n\n    setUserData(email, passwordToken, valueKey, value) {\n      console.log(\"SETTING \" + valueKey);\n      return this.httpClient.post(environment.apiURL + \"/userData/set\", {\n        \"email\": email.toString(),\n        \"pwdToken\": passwordToken,\n        \"valKey\": valueKey,\n        \"val\": value\n      });\n    }\n\n  }\n\n  ConnectionsService.ɵfac = function ConnectionsService_Factory(t) {\n    return new (t || ConnectionsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ConnectionsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConnectionsService,\n    factory: ConnectionsService.ɵfac,\n    providedIn: 'root'\n  });\n  return ConnectionsService;\n})();","map":null,"metadata":{},"sourceType":"module"}