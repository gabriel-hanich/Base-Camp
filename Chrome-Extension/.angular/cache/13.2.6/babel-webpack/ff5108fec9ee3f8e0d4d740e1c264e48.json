{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\gabri\\\\Documents\\\\GitHub\\\\Base-Camp\\\\ng-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../connections/connections.service\";\nexport class GlobalVarsService {\n  constructor(connections) {\n    this.connections = connections;\n    this.globalVars = new Map();\n    this.isAccurate = false;\n\n    if (localStorage.getItem(\"globals\") != undefined) {\n      this.globalVars = new Map(JSON.parse(localStorage.getItem(\"globals\")));\n    } else {\n      this.setDefaultVals();\n    } // Calculate whether it is wk A or B\n\n\n    this.calcCurrentWk();\n\n    if (JSON.parse(this.getVar(\"doCloudSync\"))) {\n      this.isAccurate = false; // Read current user data from the server\n\n      this.getPublicKey().then(() => {\n        console.log(\"AA\");\n\n        if (this.getVar(\"passwordToken\") != \"empty\") {\n          this.connections.getUserData(this.getVar(\"userEmail\"), this.getVar(\"passwordToken\")).subscribe(res => {\n            console.log(res);\n            let cloudKeys = Object.keys(res[0]);\n\n            for (var i = 0; i < cloudKeys.length; i++) {\n              this.setVar(cloudKeys[i], res[0][cloudKeys[i]]);\n            }\n\n            this.isAccurate = true;\n          });\n        }\n      });\n    }\n\n    this.setVar(\"lastSignInTime\", JSON.stringify(new Date().getTime()));\n  }\n\n  calcCurrentWk() {\n    // Switch the current wk from A to B (or vice versa) if it has been a week \n    let lastSignIn = new Date(JSON.parse(this.getVar(\"lastSignInTime\")));\n    let today = new Date();\n    let inBetweenDays = [];\n\n    if (today.getDate() != lastSignIn.getDate() || today.getMonth() != lastSignIn.getMonth()) {\n      // If the app hasn't already been signed into today\n      inBetweenDays = this.getDaysArray(lastSignIn.getTime(), today.getTime());\n    }\n\n    for (var i = 0; i < inBetweenDays.length; i++) {\n      if (inBetweenDays[i].getDay() == 0) {\n        // If there has been a sunday between the last sign in and the current date`\n        // Invert the week letter\n        console.log(\"INVERT\");\n\n        if (this.getVar('weekLetter') == \"a\") {\n          this.setVar(\"weekLetter\", \"b\");\n        } else if (this.getVar('weekLetter') == \"b\") {\n          this.setVar(\"weekLetter\", \"a\");\n        }\n      }\n    }\n\n    this.isAccurate = true;\n  }\n\n  getDaysArray(start, end) {\n    for (var arr = [], dt = new Date(start); dt <= new Date(end); dt.setDate(dt.getDate() + 1)) {\n      arr.push(new Date(dt));\n    }\n\n    return arr;\n  }\n\n  setDefaultVals() {\n    console.log(\"DEFAULT SET\");\n    this.setVar(\"widgetsLayout\", JSON.stringify([]));\n    this.setVar(\"doCloudSync\", JSON.stringify(false));\n    this.setVar(\"noteList\", JSON.stringify([]));\n    this.setVar(\"studyNoteList\", JSON.stringify([]));\n    this.setVar(\"lastSignInTime\", JSON.stringify(new Date().getTime()));\n  }\n\n  saveVars() {\n    localStorage.setItem(\"globals\", JSON.stringify(Array.from(this.globalVars.entries())));\n    console.log(\"SAVING\");\n  }\n\n  getPublicKey() {\n    return new Promise((resolve, reject) => {\n      // Get the current RSA public key from the server\n      this.connections.getPublicKey().then(res => {\n        this.setVar(\"serverPublicKey\", res);\n        resolve();\n      });\n    });\n  }\n\n  setVar(key, val) {\n    this.globalVars.set(key, val);\n    setTimeout(() => {\n      this.saveVars();\n    }, 50);\n  }\n\n  getVar(key) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise(resolve => {\n        if (!_this.isAccurate) {\n          // If the app hasn't already found the current week, wait for 150ms to allow it time\n          setInterval(() => {\n            if (_this.globalVars.get(key)) {\n              resolve(_this.globalVars.get(key));\n            } else {\n              resolve(\"empty\");\n            }\n          }, 1000);\n        } else {\n          if (_this.globalVars.get(key)) {\n            resolve(_this.globalVars.get(key));\n          } else {\n            resolve(\"empty\");\n          }\n        }\n      });\n    })();\n  }\n\n}\n\nGlobalVarsService.ɵfac = function GlobalVarsService_Factory(t) {\n  return new (t || GlobalVarsService)(i0.ɵɵinject(i1.ConnectionsService));\n};\n\nGlobalVarsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GlobalVarsService,\n  factory: GlobalVarsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/gabri/Documents/GitHub/Base-Camp/ng-project/src/app/services/globals/global-vars.service.ts"],"names":["i0","i1","GlobalVarsService","constructor","connections","globalVars","Map","isAccurate","localStorage","getItem","undefined","JSON","parse","setDefaultVals","calcCurrentWk","getVar","getPublicKey","then","console","log","getUserData","subscribe","res","cloudKeys","Object","keys","i","length","setVar","stringify","Date","getTime","lastSignIn","today","inBetweenDays","getDate","getMonth","getDaysArray","getDay","start","end","arr","dt","setDate","push","saveVars","setItem","Array","from","entries","Promise","resolve","reject","key","val","set","setTimeout","setInterval","get","ɵfac","GlobalVarsService_Factory","t","ɵɵinject","ConnectionsService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"../connections/connections.service\";\r\nexport class GlobalVarsService {\r\n    constructor(connections) {\r\n        this.connections = connections;\r\n        this.globalVars = new Map();\r\n        this.isAccurate = false;\r\n        if (localStorage.getItem(\"globals\") != undefined) {\r\n            this.globalVars = new Map(JSON.parse(localStorage.getItem(\"globals\")));\r\n        }\r\n        else {\r\n            this.setDefaultVals();\r\n        }\r\n        // Calculate whether it is wk A or B\r\n        this.calcCurrentWk();\r\n        if (JSON.parse(this.getVar(\"doCloudSync\"))) {\r\n            this.isAccurate = false;\r\n            // Read current user data from the server\r\n            this.getPublicKey().then(() => {\r\n                console.log(\"AA\");\r\n                if (this.getVar(\"passwordToken\") != \"empty\") {\r\n                    this.connections.getUserData(this.getVar(\"userEmail\"), this.getVar(\"passwordToken\")).subscribe((res) => {\r\n                        console.log(res);\r\n                        let cloudKeys = Object.keys(res[0]);\r\n                        for (var i = 0; i < cloudKeys.length; i++) {\r\n                            this.setVar(cloudKeys[i], res[0][cloudKeys[i]]);\r\n                        }\r\n                        this.isAccurate = true;\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        this.setVar(\"lastSignInTime\", JSON.stringify(new Date().getTime()));\r\n    }\r\n    calcCurrentWk() {\r\n        // Switch the current wk from A to B (or vice versa) if it has been a week \r\n        let lastSignIn = new Date(JSON.parse(this.getVar(\"lastSignInTime\")));\r\n        let today = new Date();\r\n        let inBetweenDays = [];\r\n        if (today.getDate() != lastSignIn.getDate() || today.getMonth() != lastSignIn.getMonth()) { // If the app hasn't already been signed into today\r\n            inBetweenDays = this.getDaysArray(lastSignIn.getTime(), today.getTime());\r\n        }\r\n        for (var i = 0; i < inBetweenDays.length; i++) {\r\n            if (inBetweenDays[i].getDay() == 0) { // If there has been a sunday between the last sign in and the current date`\r\n                // Invert the week letter\r\n                console.log(\"INVERT\");\r\n                if (this.getVar('weekLetter') == \"a\") {\r\n                    this.setVar(\"weekLetter\", \"b\");\r\n                }\r\n                else if (this.getVar('weekLetter') == \"b\") {\r\n                    this.setVar(\"weekLetter\", \"a\");\r\n                }\r\n            }\r\n        }\r\n        this.isAccurate = true;\r\n    }\r\n    getDaysArray(start, end) {\r\n        for (var arr = [], dt = new Date(start); dt <= new Date(end); dt.setDate(dt.getDate() + 1)) {\r\n            arr.push(new Date(dt));\r\n        }\r\n        return arr;\r\n    }\r\n    ;\r\n    setDefaultVals() {\r\n        console.log(\"DEFAULT SET\");\r\n        this.setVar(\"widgetsLayout\", JSON.stringify([]));\r\n        this.setVar(\"doCloudSync\", JSON.stringify(false));\r\n        this.setVar(\"noteList\", JSON.stringify([]));\r\n        this.setVar(\"studyNoteList\", JSON.stringify([]));\r\n        this.setVar(\"lastSignInTime\", JSON.stringify(new Date().getTime()));\r\n    }\r\n    saveVars() {\r\n        localStorage.setItem(\"globals\", JSON.stringify(Array.from(this.globalVars.entries())));\r\n        console.log(\"SAVING\");\r\n    }\r\n    getPublicKey() {\r\n        return new Promise((resolve, reject) => {\r\n            // Get the current RSA public key from the server\r\n            this.connections.getPublicKey().then((res) => {\r\n                this.setVar(\"serverPublicKey\", res);\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n    setVar(key, val) {\r\n        this.globalVars.set(key, val);\r\n        setTimeout(() => {\r\n            this.saveVars();\r\n        }, 50);\r\n    }\r\n    async getVar(key) {\r\n        return new Promise((resolve) => {\r\n            if (!this.isAccurate) { // If the app hasn't already found the current week, wait for 150ms to allow it time\r\n                setInterval(() => {\r\n                    if (this.globalVars.get(key)) {\r\n                        resolve(this.globalVars.get(key));\r\n                    }\r\n                    else {\r\n                        resolve(\"empty\");\r\n                    }\r\n                }, 1000);\r\n            }\r\n            else {\r\n                if (this.globalVars.get(key)) {\r\n                    resolve(this.globalVars.get(key));\r\n                }\r\n                else {\r\n                    resolve(\"empty\");\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\nGlobalVarsService.ɵfac = function GlobalVarsService_Factory(t) { return new (t || GlobalVarsService)(i0.ɵɵinject(i1.ConnectionsService)); };\r\nGlobalVarsService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: GlobalVarsService, factory: GlobalVarsService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}