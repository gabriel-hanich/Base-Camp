{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\gabri\\\\Documents\\\\GitHub\\\\Base-Camp\\\\ng-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../connections/connections.service\";\nexport class GlobalVarsService {\n  constructor(connections) {\n    this.connections = connections;\n    this.globalVars = new Map();\n    this.isAccurate = false;\n\n    if (localStorage.getItem(\"globals\") != undefined) {\n      this.globalVars = new Map(JSON.parse(localStorage.getItem(\"globals\"))); // Calculate whether it is wk A or B\n\n      if (JSON.parse(this.getVar(\"doCloudSync\"))) {\n        this.syncFromCloud().catch(error => {\n          console.log(error);\n        }).then(() => {\n          this.setVar(\"lastSignInTime\", JSON.stringify(new Date().getTime()));\n          this.isAccurate = true;\n        });\n      } else {\n        this.isAccurate = true;\n      }\n\n      this.calcCurrentWk();\n    } else {\n      this.isAccurate = true;\n    }\n  }\n\n  calcCurrentWk() {\n    // Switch the current wk from A to B (or vice versa) if it has been a week \n    let lastSignIn = new Date(JSON.parse(this.getVar(\"lastSignInTime\")));\n    let today = new Date();\n    let inBetweenDays = [];\n\n    if (today.getDate() != lastSignIn.getDate() || today.getMonth() != lastSignIn.getMonth()) {\n      // If the app hasn't already been signed into today\n      inBetweenDays = this.getDaysArray(lastSignIn.getTime(), today.getTime());\n    }\n\n    for (var i = 0; i < inBetweenDays.length; i++) {\n      if (inBetweenDays[i].getDay() == 0) {\n        // If there has been a sunday between the last sign in and the current date`\n        // Invert the week letter\n        console.log(\"INVERT\");\n\n        if (this.getVar('weekLetter') == \"a\") {\n          this.setVar(\"weekLetter\", \"b\");\n        } else if (this.getVar('weekLetter') == \"b\") {\n          this.setVar(\"weekLetter\", \"a\");\n        }\n      }\n    } // this.isAccurate = true\n\n  }\n\n  getDaysArray(start, end) {\n    for (var arr = [], dt = new Date(start); dt <= new Date(end); dt.setDate(dt.getDate() + 1)) {\n      arr.push(new Date(dt));\n    }\n\n    return arr;\n  }\n\n  syncFromCloud() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        console.log(\"SYNCING\");\n        _this.isAccurate = false; // Read current user data from the server\n\n        _this.connections.getUserData(_this.getVar(\"userEmail\"), _this.getVar(\"passwordToken\")).subscribe(res => {\n          let cloudKeys = Object.keys(res[0]);\n\n          for (var i = 0; i < cloudKeys.length; i++) {\n            if (environment.keysToSync.includes(cloudKeys[i])) {\n              if (typeof res[0][cloudKeys[i]] == 'string') {\n                _this.setVar(cloudKeys[i], res[0][cloudKeys[i]], false);\n              } else {\n                _this.setVar(cloudKeys[i], JSON.stringify(res[0][cloudKeys[i]]), false);\n              }\n            }\n          }\n\n          resolve();\n        });\n      });\n    })();\n  }\n\n  saveVars() {\n    localStorage.setItem(\"globals\", JSON.stringify(Array.from(this.globalVars.entries())));\n    console.log(\"SAVING\");\n  }\n\n  wipeStorage() {\n    localStorage.clear();\n    this.globalVars = new Map();\n    this.isAccurate = true;\n  }\n\n  hasAccurateData() {\n    return this.isAccurate;\n  }\n\n  getPublicKey() {\n    return new Promise((resolve, reject) => {\n      // Get the current RSA public key from the server\n      this.connections.getPublicKey().then(res => {\n        this.setVar(\"serverPublicKey\", res);\n        setTimeout(() => {\n          resolve();\n        }, 50);\n      });\n    });\n  }\n\n  setVar(key, val, doCloudSync) {\n    this.globalVars.set(key, val);\n    setTimeout(() => {\n      this.saveVars();\n    }, 50);\n\n    if (environment.keysToSync.includes(key) && doCloudSync != false && this.getVar(\"doCloudSync\") == \"true\") {\n      var valToUpload = val;\n\n      try {\n        valToUpload = JSON.parse(valToUpload);\n      } catch (SyntaxError) {}\n\n      let intVal = parseInt(valToUpload);\n\n      if (!Number.isNaN(intVal)) {\n        valToUpload = intVal;\n      }\n\n      this.connections.setUserData(this.getVar(\"userEmail\"), this.getVar(\"passwordToken\"), key, valToUpload).subscribe(res => {\n        console.log(key + \" Updated on the cloud\");\n      });\n    }\n  }\n\n  getVar(key) {\n    if (this.globalVars.get(key)) {\n      return this.globalVars.get(key);\n    } else {\n      return \"empty\";\n    }\n  }\n\n}\n\nGlobalVarsService.ɵfac = function GlobalVarsService_Factory(t) {\n  return new (t || GlobalVarsService)(i0.ɵɵinject(i1.ConnectionsService));\n};\n\nGlobalVarsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GlobalVarsService,\n  factory: GlobalVarsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/gabri/Documents/GitHub/Base-Camp/ng-project/src/app/services/globals/global-vars.service.ts"],"names":["environment","i0","i1","GlobalVarsService","constructor","connections","globalVars","Map","isAccurate","localStorage","getItem","undefined","JSON","parse","getVar","syncFromCloud","catch","error","console","log","then","setVar","stringify","Date","getTime","calcCurrentWk","lastSignIn","today","inBetweenDays","getDate","getMonth","getDaysArray","i","length","getDay","start","end","arr","dt","setDate","push","Promise","resolve","reject","getUserData","subscribe","res","cloudKeys","Object","keys","keysToSync","includes","saveVars","setItem","Array","from","entries","wipeStorage","clear","hasAccurateData","getPublicKey","setTimeout","key","val","doCloudSync","set","valToUpload","SyntaxError","intVal","parseInt","Number","isNaN","setUserData","get","ɵfac","GlobalVarsService_Factory","t","ɵɵinject","ConnectionsService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { environment } from 'src/environments/environment';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"../connections/connections.service\";\r\nexport class GlobalVarsService {\r\n    constructor(connections) {\r\n        this.connections = connections;\r\n        this.globalVars = new Map();\r\n        this.isAccurate = false;\r\n        if (localStorage.getItem(\"globals\") != undefined) {\r\n            this.globalVars = new Map(JSON.parse(localStorage.getItem(\"globals\")));\r\n            // Calculate whether it is wk A or B\r\n            if (JSON.parse(this.getVar(\"doCloudSync\"))) {\r\n                this.syncFromCloud().catch((error) => {\r\n                    console.log(error);\r\n                }).then(() => {\r\n                    this.setVar(\"lastSignInTime\", JSON.stringify(new Date().getTime()));\r\n                    this.isAccurate = true;\r\n                });\r\n            }\r\n            else {\r\n                this.isAccurate = true;\r\n            }\r\n            this.calcCurrentWk();\r\n        }\r\n        else {\r\n            this.isAccurate = true;\r\n        }\r\n    }\r\n    calcCurrentWk() {\r\n        // Switch the current wk from A to B (or vice versa) if it has been a week \r\n        let lastSignIn = new Date(JSON.parse(this.getVar(\"lastSignInTime\")));\r\n        let today = new Date();\r\n        let inBetweenDays = [];\r\n        if (today.getDate() != lastSignIn.getDate() || today.getMonth() != lastSignIn.getMonth()) { // If the app hasn't already been signed into today\r\n            inBetweenDays = this.getDaysArray(lastSignIn.getTime(), today.getTime());\r\n        }\r\n        for (var i = 0; i < inBetweenDays.length; i++) {\r\n            if (inBetweenDays[i].getDay() == 0) { // If there has been a sunday between the last sign in and the current date`\r\n                // Invert the week letter\r\n                console.log(\"INVERT\");\r\n                if (this.getVar('weekLetter') == \"a\") {\r\n                    this.setVar(\"weekLetter\", \"b\");\r\n                }\r\n                else if (this.getVar('weekLetter') == \"b\") {\r\n                    this.setVar(\"weekLetter\", \"a\");\r\n                }\r\n            }\r\n        }\r\n        // this.isAccurate = true\r\n    }\r\n    getDaysArray(start, end) {\r\n        for (var arr = [], dt = new Date(start); dt <= new Date(end); dt.setDate(dt.getDate() + 1)) {\r\n            arr.push(new Date(dt));\r\n        }\r\n        return arr;\r\n    }\r\n    ;\r\n    async syncFromCloud() {\r\n        return new Promise((resolve, reject) => {\r\n            console.log(\"SYNCING\");\r\n            this.isAccurate = false;\r\n            // Read current user data from the server\r\n            this.connections.getUserData(this.getVar(\"userEmail\"), this.getVar(\"passwordToken\")).subscribe((res) => {\r\n                let cloudKeys = Object.keys(res[0]);\r\n                for (var i = 0; i < cloudKeys.length; i++) {\r\n                    if (environment.keysToSync.includes(cloudKeys[i])) {\r\n                        if (typeof res[0][cloudKeys[i]] == 'string') {\r\n                            this.setVar(cloudKeys[i], res[0][cloudKeys[i]], false);\r\n                        }\r\n                        else {\r\n                            this.setVar(cloudKeys[i], JSON.stringify(res[0][cloudKeys[i]]), false);\r\n                        }\r\n                    }\r\n                }\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n    saveVars() {\r\n        localStorage.setItem(\"globals\", JSON.stringify(Array.from(this.globalVars.entries())));\r\n        console.log(\"SAVING\");\r\n    }\r\n    wipeStorage() {\r\n        localStorage.clear();\r\n        this.globalVars = new Map();\r\n        this.isAccurate = true;\r\n    }\r\n    hasAccurateData() {\r\n        return this.isAccurate;\r\n    }\r\n    getPublicKey() {\r\n        return new Promise((resolve, reject) => {\r\n            // Get the current RSA public key from the server\r\n            this.connections.getPublicKey().then((res) => {\r\n                this.setVar(\"serverPublicKey\", res);\r\n                setTimeout(() => {\r\n                    resolve();\r\n                }, 50);\r\n            });\r\n        });\r\n    }\r\n    setVar(key, val, doCloudSync) {\r\n        this.globalVars.set(key, val);\r\n        setTimeout(() => {\r\n            this.saveVars();\r\n        }, 50);\r\n        if (environment.keysToSync.includes(key) && doCloudSync != false && this.getVar(\"doCloudSync\") == \"true\") {\r\n            var valToUpload = val;\r\n            try {\r\n                valToUpload = JSON.parse(valToUpload);\r\n            }\r\n            catch (SyntaxError) {\r\n            }\r\n            let intVal = parseInt(valToUpload);\r\n            if (!Number.isNaN(intVal)) {\r\n                valToUpload = intVal;\r\n            }\r\n            this.connections.setUserData(this.getVar(\"userEmail\"), this.getVar(\"passwordToken\"), key, valToUpload).subscribe((res) => {\r\n                console.log(key + \" Updated on the cloud\");\r\n            });\r\n        }\r\n    }\r\n    getVar(key) {\r\n        if (this.globalVars.get(key)) {\r\n            return this.globalVars.get(key);\r\n        }\r\n        else {\r\n            return \"empty\";\r\n        }\r\n    }\r\n}\r\nGlobalVarsService.ɵfac = function GlobalVarsService_Factory(t) { return new (t || GlobalVarsService)(i0.ɵɵinject(i1.ConnectionsService)); };\r\nGlobalVarsService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: GlobalVarsService, factory: GlobalVarsService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}