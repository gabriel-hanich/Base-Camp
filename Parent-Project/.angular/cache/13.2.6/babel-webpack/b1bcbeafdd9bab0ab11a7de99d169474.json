{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\gabri\\\\Documents\\\\GitHub\\\\Base-Camp\\\\ng-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../connections/connections.service\";\nexport let GlobalVarsService = /*#__PURE__*/(() => {\n  class GlobalVarsService {\n    constructor(connections) {\n      this.connections = connections;\n      this.globalVars = new Map();\n      this.isAccurate = false;\n      this.canConnect = false;\n\n      if (localStorage.getItem(\"globals\") != undefined) {\n        this.globalVars = new Map(JSON.parse(localStorage.getItem(\"globals\"))); // Calculate whether it is wk A or B\n\n        if (JSON.parse(this.getVar(\"doCloudSync\"))) {\n          this.syncFromCloud().then(() => {\n            this.setVar(\"lastSignInTime\", JSON.stringify(new Date().getTime()));\n            this.isAccurate = true;\n          });\n        } else {\n          this.isAccurate = true;\n        }\n\n        this.calcCurrentWk();\n      } else {\n        this.isAccurate = true;\n      }\n    }\n\n    calcCurrentWk() {\n      // Switch the current wk from A to B (or vice versa) if it has been a week \n      let lastSignIn = new Date(JSON.parse(this.getVar(\"lastSignInTime\")));\n      let today = new Date();\n      let inBetweenDays = [];\n\n      if (today.getDate() != lastSignIn.getDate() || today.getMonth() != lastSignIn.getMonth()) {\n        // If the app hasn't already been signed into today\n        inBetweenDays = this.getDaysArray(lastSignIn.getTime(), today.getTime());\n      }\n\n      for (var i = 0; i < inBetweenDays.length; i++) {\n        if (inBetweenDays[i].getDay() == 0) {\n          // If there has been a sunday between the last sign in and the current date`\n          // Invert the week letter\n          console.log(\"INVERT\");\n\n          if (this.getVar('weekLetter') == \"a\") {\n            this.setVar(\"weekLetter\", \"b\");\n          } else if (this.getVar('weekLetter') == \"b\") {\n            this.setVar(\"weekLetter\", \"a\");\n          }\n        }\n      } // this.isAccurate = true\n\n    }\n\n    getDaysArray(start, end) {\n      for (var arr = [], dt = new Date(start); dt <= new Date(end); dt.setDate(dt.getDate() + 1)) {\n        arr.push(new Date(dt));\n      }\n\n      return arr;\n    }\n\n    syncFromCloud() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        return new Promise((resolve, reject) => {\n          console.log(\"SYNCING\");\n          _this.isAccurate = false; // Read current user data from the server\n\n          _this.connections.getUserData(_this.getVar(\"userEmail\"), _this.getVar(\"passwordToken\")).subscribe(res => {\n            console.log(res);\n            let cloudKeys = Object.keys(res[0]);\n            _this.canConnect = true;\n\n            if (res[0][\"lastSignInTime\"] >= Number.parseInt(_this.getVar(\"lastSignInTime\"))) {\n              console.log(\"NEW PACKET\"); // Only set data if the server data is newer or the same age as the local data\n\n              for (var i = 0; i < cloudKeys.length; i++) {\n                if (environment.keysToSync.includes(cloudKeys[i])) {\n                  if (typeof res[0][cloudKeys[i]] == 'string') {\n                    _this.setVar(cloudKeys[i], res[0][cloudKeys[i]], false);\n                  } else {\n                    _this.setVar(cloudKeys[i], JSON.stringify(res[0][cloudKeys[i]]), false);\n                  }\n                }\n              }\n            } else {\n              // If the local data is newer then that stored on the cloud,\n              // Upload the changed variables to it\n              console.log(\"LOCAL DATA IS NEWER\");\n\n              for (var i = 0; i < cloudKeys.length; i++) {\n                if (environment.keysToSync.includes(cloudKeys[i])) {\n                  if (typeof res[0][cloudKeys[i]] == 'string') {\n                    if (res[0][cloudKeys[i]] != _this.getVar(cloudKeys[i])) {\n                      console.log(\"UPDATING \" + cloudKeys[i]);\n\n                      _this.connections.setUserData(_this.getVar(\"userEmail\"), _this.getVar(\"passwordToken\"), cloudKeys[i], _this.getVar(cloudKeys[i])).subscribe(() => {});\n                    }\n                  } else {\n                    // Only use JSON.stringify if the stored value is NOT a string\n                    if (JSON.stringify(res[0][cloudKeys[i]]) != _this.getVar(cloudKeys[i])) {\n                      console.log([JSON.stringify(cloudKeys[i]), JSON.parse(_this.getVar(cloudKeys[i]))]);\n                      console.log(\"UPDATING \" + cloudKeys[i]);\n\n                      _this.connections.setUserData(_this.getVar(\"userEmail\"), _this.getVar(\"passwordToken\"), JSON.stringify(cloudKeys[i]), JSON.parse(_this.getVar(cloudKeys[i]))).subscribe(() => {});\n                    }\n                  }\n                }\n              }\n            }\n\n            resolve();\n          }, err => {\n            _this.canConnect = false;\n            resolve();\n          });\n        });\n      })();\n    }\n\n    saveVars() {\n      localStorage.setItem(\"globals\", JSON.stringify(Array.from(this.globalVars.entries())));\n      console.log(\"SAVING\");\n    }\n\n    wipeStorage() {\n      localStorage.clear();\n      this.globalVars = new Map();\n      this.isAccurate = true;\n    }\n\n    hasAccurateData() {\n      return [this.isAccurate, this.canConnect];\n    }\n\n    getPublicKey() {\n      return new Promise((resolve, reject) => {\n        // Get the current RSA public key from the server\n        this.connections.getPublicKey().then(res => {\n          this.setVar(\"serverPublicKey\", res);\n          setTimeout(() => {\n            resolve();\n          }, 50);\n        });\n      });\n    }\n\n    setVar(key, val, doCloudSync) {\n      this.globalVars.set(key, val);\n      setTimeout(() => {\n        this.saveVars();\n      }, 50);\n\n      if (environment.keysToSync.includes(key) && doCloudSync != false && this.getVar(\"doCloudSync\") == \"true\" && this.canConnect) {\n        var valToUpload = val;\n\n        try {\n          valToUpload = JSON.parse(valToUpload);\n        } catch (SyntaxError) {}\n\n        let intVal = parseInt(valToUpload);\n\n        if (!Number.isNaN(intVal)) {\n          valToUpload = intVal;\n        }\n\n        this.connections.setUserData(this.getVar(\"userEmail\"), this.getVar(\"passwordToken\"), key, valToUpload).subscribe(res => {\n          console.log(key + \" Updated on the cloud\");\n        });\n      }\n    }\n\n    getVar(key) {\n      if (this.globalVars.get(key)) {\n        return this.globalVars.get(key);\n      } else {\n        return \"empty\";\n      }\n    }\n\n  }\n\n  GlobalVarsService.ɵfac = function GlobalVarsService_Factory(t) {\n    return new (t || GlobalVarsService)(i0.ɵɵinject(i1.ConnectionsService));\n  };\n\n  GlobalVarsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GlobalVarsService,\n    factory: GlobalVarsService.ɵfac,\n    providedIn: 'root'\n  });\n  return GlobalVarsService;\n})();","map":null,"metadata":{},"sourceType":"module"}